<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	    xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:util="http://www.springframework.org/schema/util"
        
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans 
				http://www.springframework.org/schema/beans/spring-beans.xsd
				 http://www.springframework.org/schema/aop 
				 http://www.springframework.org/schema/aop/spring-aop.xsd
				 http://www.springframework.org/schema/tx 
				 http://www.springframework.org/schema/tx/spring-tx.xsd
				http://www.springframework.org/schema/context 
				http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/util 
				http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- web.xml 에 넣던 context-param을 properties로 분산관리 -->			
	<util:properties id="commonProperties" location="classpath:config/common.properties"/>
	
	<!-- PropertyPlaceholderConfigurer 로 로드된 resource 는 ${  } 로 접근 가능 -->
	<bean	id="propertyConfigurer"
				class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties" />
	</bean>

	<!-- DBCP (Apache Commons Database Connection) 사용 -->
	<bean id="dataSource"	
				class="org.apache.commons.dbcp.BasicDataSource" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
	</bean>												 
												 
	<!-- ㅇ SqlSession 인스턴스를 생성하는 SqlSessionFactory 생성
	      ㅇ Factory Pattern  적용 :: Spring 의 FactoryBean interface 구현 -->
	<bean 	id="sqlSessionFactoryBean" 
					class="org.mybatis.spring.SqlSessionFactoryBean" >
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql/mybatis-config.xml"/>
	</bean>
	
	<!--  ㅇ SqlSessionTeampate 인스턴스생성
		   ㅇ Spring 과 연동시 사용하는 핵심 SqlSession 구현체
		   ㅇ Spring 에서 제공한는 Transaction 처리에 구조화된 SqlSession 구현체	 -->
	<bean id="sqlSessionTemplate"		
					class="org.mybatis.spring.SqlSessionTemplate" >		
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>				
	

	
	<!-- 	ㅇ 어노테이션 기반 :: Spring Framework 사용.-->				
	<context:component-scan base-package="com.model2.mvc">
		<context:include-filter type="annotation"	expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"	expression="org.springframework.stereotype.Repository" />
		<context:exclude-filter type="annotation" 	expression="org.springframework.stereotype.Controller" />
	</context:component-scan>				
	
	<!-- 
	<bean id="Dao닷!" class="com.model2.mvc.service.user.impl.UserDaoImpl">
		<property name="sqlSession" ref="sqlSessionTemplate"/>
	</bean>
	
	<bean id="Service닷!" class="com.model2.mvc.service.user.impl.UserServiceImpl">
		<property name="userDao" ref="Dao닷!"/>
	</bean>
	
	<bean id="productDao닷!" class="com.model2.mvc.service.product.impl.ProductDaoImpl">
		<property name="sqlSession" ref="sqlSessionTemplate"/>
	</bean>
	
	<bean id="productService닷!" class="com.model2.mvc.service.product.impl.ProductServiceImpl">
		<property name="productDao" ref="productDao닷!"/>
	</bean>
	-->
	
	<!--  AOP 적용 : LOG 를 처리사느  Aspect 선언   -->
	<!-- 1.일반 Bean Definition :: POJO 기반 -->
	<bean 	id="LogAspectJ"		class="com.model2.mvc.common.aspect.LogAspectJ" />
	 
	 <!-- 2. 선언적으로 Point cut / Advice 정의 
	 			:: TestAspectJ02.java(pointCut+advice 합치기(?)) 의 annotation과 아래를 비교 -->
	 <aop:config>
	 	<aop:aspect  ref="LogAspectJ">
	 		<aop:around 
					pointcut="execution(* com.model2.mvc.service..*Impl.*(..) )"	method="invoke"/>
	 	</aop:aspect>
	 </aop:config>
	 
	<!-- TransactioManager instance 생성 -->
	<bean id="transactionManager" 
				class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource"/>
	</bean>	
	
	<!-- Transaction Advice 생성 
			:: method : transaction 적용 Method
			:: propagation : transaction 전파규칙(default : REQUIRED)
			:: read-only : 트랜잭션이 읽기만가능 (선택)-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- get 으로 시작된는 Method에 적용 transaction 규칙 -->				
			<tx:method 	name="get*" 	propagation="REQUIRED"	read-only="true" />
			<!-- add 으로 시작된는 Method에 적용 transaction 규칙 -->		
			<tx:method	name="add*"	 />
			<!--모든 Method에 적용 transaction 규칙 -->		
			<!-- <tx:method	name="*"	 />-->	
		</tx:attributes>
	</tx:advice>

	<!-- AOP : pointcut / advisor 설정 -->
	<aop:config>
		<aop:pointcut 	id="requiredTx"
									expression="execution(* com.model2.mvc.service..*ServiceImpl.*(..) )" />
		<aop:advisor 	advice-ref="txAdvice"  pointcut-ref="requiredTx"  />
	</aop:config>
	
</beans>